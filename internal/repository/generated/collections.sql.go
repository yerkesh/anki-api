// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: collections.sql

package generated

import (
	"context"
)

const insertCollection = `-- name: InsertCollection :one
INSERT INTO collections (user_id, name, native_language, learning_language)
VALUES ($1, $2, $3, $4) RETURNING id
`

type InsertCollectionParams struct {
	UserID           int32  `db:"user_id" json:"user_id"`
	Name             string `db:"name" json:"name"`
	NativeLanguage   string `db:"native_language" json:"native_language"`
	LearningLanguage string `db:"learning_language" json:"learning_language"`
}

func (q *Queries) InsertCollection(ctx context.Context, arg InsertCollectionParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertCollection,
		arg.UserID,
		arg.Name,
		arg.NativeLanguage,
		arg.LearningLanguage,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectCollection = `-- name: SelectCollection :one
SELECT c.id, c.user_id, c.name, c.native_language, c.learning_language FROM collections c
WHERE c.id = $1
`

type SelectCollectionRow struct {
	ID               int32  `db:"id" json:"id"`
	UserID           int32  `db:"user_id" json:"user_id"`
	Name             string `db:"name" json:"name"`
	NativeLanguage   string `db:"native_language" json:"native_language"`
	LearningLanguage string `db:"learning_language" json:"learning_language"`
}

func (q *Queries) SelectCollection(ctx context.Context, id int32) (SelectCollectionRow, error) {
	row := q.db.QueryRow(ctx, selectCollection, id)
	var i SelectCollectionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.NativeLanguage,
		&i.LearningLanguage,
	)
	return i, err
}

const selectCollections = `-- name: SelectCollections :many
SELECT id, user_id, name, native_language, learning_language FROM collections
WHERE user_id = $1
`

type SelectCollectionsRow struct {
	ID               int32  `db:"id" json:"id"`
	UserID           int32  `db:"user_id" json:"user_id"`
	Name             string `db:"name" json:"name"`
	NativeLanguage   string `db:"native_language" json:"native_language"`
	LearningLanguage string `db:"learning_language" json:"learning_language"`
}

func (q *Queries) SelectCollections(ctx context.Context, userID int32) ([]SelectCollectionsRow, error) {
	rows, err := q.db.Query(ctx, selectCollections, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectCollectionsRow{}
	for rows.Next() {
		var i SelectCollectionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.NativeLanguage,
			&i.LearningLanguage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
